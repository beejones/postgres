#!/usr/bin/perl
#
# We're using C99, but we want the convenience of C11's thread_local
# variable syntax, since that keeps the syntax of plain old variables.
# We auto-generate macros that you can use with syntax just like
# global variables (which these were in the past), but they live in a
# per-thread struct.

my @variables = (
	[ "volatile uint32", "InterruptHoldoffCount" ]
);

print "/*\n";
print " * Auto-generated by generate-thread-local-vars.pl.\n";
print " */\n";
print "\n";
print "#ifndef THREAD_LOCAL_VARS_H\n";
print "#define THREAD_LOCAL_VARS_H\n";
print "\n";
print "#include \"port/pg_thread_specific.h\"\n";
print "\n";
print "struct thread_local_var_table {\n";
foreach (@variables) {
	print "\t" . $_->[0] . " " . $_->[1] . "_var;\n";
};
print "};\n";
print "\n";
print "extern void init_thread_local_var_table(void);\n";
print "extern pg_thread_key_t thread_local_var_table_key;\n";
print "\n";
print "static inline struct thread_local_var_table *\n";
print "get_thread_local_var_table(void)\n";
print "{\n";
print "\treturn pg_thread_getspecific(thread_local_var_table_key);\n";
print "}\n";
print "\n";
foreach (@variables) {
	print "#define " . $_->[1] . " (get_thread_local_var_table()->" . $_->[1] . "_var)\n";
};
print "\n";
print "#endif\n";
