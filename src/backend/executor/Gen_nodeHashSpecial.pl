#! /usr/bin/perl -w
#-------------------------------------------------------------------------
#
# Gen_nodeHashSpecial.pl
#    Perl script that generates nodeHashSpecial.c
#
# Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
# Portions Copyright (c) 1994, Regents of the University of California
#
#
# IDENTIFICATION
#    src/backend/executor/Gen_nodeHashSpecial.pl
#
#-------------------------------------------------------------------------

print <<OFH;
/*-------------------------------------------------------------------------
 *
 * nodeHashSpecial.inc
 *    Machine-generated code included by nodeHash.c.
 *
 *	******************************
 *	*** DO NOT EDIT THIS FILE! ***
 *	******************************
 *
 *	It has been GENERATED by src/backend/executor/Gen_nodeHashSpecial.pl
 *
 *-------------------------------------------------------------------------
 */


typedef void(*MultiExecHash_specialized_function)(HashState *node);

OFH

@parallel = qw(Private Parallel);
@hashfuntype = qw(EXPRESSION INT4);
@nullpolicy = qw(NOTNULL KEEPNULL DROPNULL);
@skew = qw(SKEW NOSKEW);

foreach $parallel (@parallel) {
  foreach $hashfuntype (@hashfuntype) {
    foreach $nullpolicy (@nullpolicy) {
	  foreach $skew (@skew) {
	    print "\n";
	    print "static void\n";
		print "MultiExecHash_" . lc($parallel) . "_" . lc($hashfuntype) . "_" . lc($nullpolicy) . "_" . lc($skew) . "(HashState *node)\n";
		print "{\n";
		my $skew_tf = "false";
		if ($skew eq "SKEW") {
		  $skew_tf = "true";
		}
		print "\tMultiExec${parallel}Hash(node, HJ_HASH32_FUN_$hashfuntype, HJ_KEY_$nullpolicy, $skew_tf);\n";
		print "}\n";
	  }
	}
  }
}

print "\n";
print "\n";
print "const static MultiExecHash_specialized_function MultiExecHash_specialization_table[${\scalar @parallel}][${\scalar @hashfuntype}][${\scalar @nullpolicy}][${\scalar @skew}] =\n";
print "{\n";
foreach $parallel (@parallel) {
  print "\t{\n";
  foreach $hashfuntype (@hashfuntype) {
	print "\t\t{\n";
    foreach $nullpolicy (@nullpolicy) {
	  print "\t\t\t{\n";
	  foreach $skew (@skew) {
	  	print "\t\t\t\tMultiExecHash_" . lc($parallel) . "_" . lc($hashfuntype) . "_" . lc($nullpolicy) . "_" . lc($skew) . ",\n";
	  }
	  print "\t\t\t},\n";
	}
	print "\t\t},\n";
  }
  print "\t},\n";
}
print "};\n";
